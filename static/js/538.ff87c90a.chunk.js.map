{"version":3,"file":"static/js/538.ff87c90a.chunk.js","mappings":"wKA+BA,IA3B4B,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACvBC,GAAWC,EAAAA,EAAAA,MAUjB,OACE,0BACE,wBAAKF,EAVPA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAM,CAAEP,SAAAA,IAA5C,SACGI,KAFID,MASuB,W,yHChBtC,K,SC+CA,EA3CkB,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SACnB,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAgBA,OACE,mBAAQC,UAAWC,EAAAA,UAAnB,UACE,kBAAMD,UAAWC,EAAAA,WAAkBC,SAZlB,SAAAC,GACnBA,EAAMC,iBAEN,GAA6B,KAAzBN,EAAcO,OAChB,OAAOC,EAAAA,GAAAA,QAAc,0BAEvBV,EAASE,GAJwBC,EAAiB,KAUhD,WACE,mBAAQQ,KAAK,SAASP,UAAWC,EAAAA,kBAAjC,UACE,iBAAMD,UAAWC,EAAAA,wBAAjB,uBAGF,kBACED,UAAWC,EAAAA,iBACXM,KAAK,OACLC,KAAK,gBACLC,MAAOX,EACPY,SA1BoB,SAAAP,GAC1BJ,EAAiBI,EAAMQ,cAAcF,MAAMG,gBA0BrCC,aAAa,MACbC,WAAS,EACTC,YAAY,oC,oBC9BTC,EAAa,WACxB,OAA0CnB,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAe8B,EAAf,KACA,GAA0BpB,EAAAA,EAAAA,UAAS,MAAnC,eAAOqB,EAAP,KAAcC,EAAd,KACA,GAAkCtB,EAAAA,EAAAA,WAAS,GAA3C,eAAOuB,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WA6Bc,KAAlBxB,GA5BiB,SAAAA,GACnBuB,GAAa,GAEbE,YAAW,WACT,KACEC,EAAAA,EAAAA,GAAY1B,GAAe2B,MAAK,SAAAC,GAC9B,IAAKA,EAAKA,KAAKC,KAAKC,OAClB,OAAOtB,EAAAA,GAAAA,MACL,qDAGJ,IAAMuB,EAAeH,EAAKA,KAAKC,KAAKrC,KAClC,kBAAgD,CAC9CC,GADF,EAAGA,GAEDuC,aAFF,EAAOA,aAGLC,KAHF,EAAqBA,KAInBC,cAJF,EAA2BA,kBAO7Bf,GAAU,SAAAgB,GAAC,wBAAQA,IAAR,OAAcJ,UAE3B,MAAOX,GACPC,EAASD,GAlBX,QAoBEG,GAAa,MAEd,KAGHa,CAAapC,KAEd,CAACA,IAUJ,OACE,iCACE,SAAC,EAAD,CAAWF,SAVY,SAAAa,GACzB,GAAIA,IAAUX,EAGZ,OAFAC,EAAiBU,QACjBQ,EAAU,OAQTC,GAASZ,EAAAA,GAAAA,MAAA,wCAA6CY,EAAMiB,UAC5Df,IAAa,SAACgB,EAAA,EAAD,CAAQC,MAAO,UAAWC,KAAM,KAC7CnD,EAAOyC,OAAS,IAAK,SAACW,EAAA,EAAD,CAAcpD,OAAQA,S,4EC1DrCqD,EAAO,SACdC,GACF,OAAOC,IAAAA,IAAUD,ICGrB,EAPiB,CACfE,SAAU,gCACVC,QAAS,mCACTC,iBAAkB,SCAZF,EAAsBG,EAAAA,SAAZF,EAAYE,EAAAA,QAEjBtB,EAAc,WAAe,IAAduB,EAAa,uDAAN,EACjC,OAAOP,EAAA,UACFG,EADE,uCACqCC,EADrC,iBACqDG","sources":["components/MovieGallery/MovieGallery.jsx","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js","services/settings.js","services/fetchMovies.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n// import style from './MovieGallery.module.css';\nimport PropTypes from 'prop-types';\n\nexport const MovieGallery = ({ movies }) => {\n  const location = useLocation();\n  const renderGallery = () =>\n    movies.map(({ id, title }) => (\n      <li key={id}>\n        <Link to={`/movies/${id}`} state={{ from: { location } }}>\n          {title}\n        </Link>\n      </li>\n    ));\n\n  return (\n    <div>\n      <ul>{movies ? renderGallery() : null}</ul>\n    </div>\n  );\n};\n\nMovieGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n\nexport default MovieGallery;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport style from './Searchbar.module.css';\n\nconst Searchbar = ({ onSearch }) => {\n  const [searchRequest, setSearchRequest] = useState('');\n\n  const handleRequestChange = event => {\n    setSearchRequest(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const clearSearchRequest = () => setSearchRequest('');\n    if (searchRequest.trim() === '') {\n      return toast.warning('Search field is empty!');\n    }\n    onSearch(searchRequest);\n    clearSearchRequest();\n  };\n\n  return (\n    <header className={style.Searchbar}>\n      <form className={style.SearchForm} onSubmit={handleSubmit}>\n        <button type=\"submit\" className={style.SearchForm_button}>\n          <span className={style.SearchForm_button_label}>Search</span>\n        </button>\n\n        <input\n          className={style.SearchForm_input}\n          type=\"text\"\n          name=\"searchRequest\"\n          value={searchRequest}\n          onChange={handleRequestChange}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter your search request\"\n        />\n      </form>\n    </header>\n  );\n};\n\nSearchbar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport Loader from 'components/Loader/Loader';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport MovieGallery from 'components/MovieGallery/MovieGallery';\nimport { fetchMovies } from 'services/fetchMovies';\n\nexport const MoviesPage = () => {\n  const [searchRequest, setSearchRequest] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const updateMovies = searchRequest => {\n      setIsLoading(true);\n\n      setTimeout(() => {\n        try {\n          fetchMovies(searchRequest).then(data => {\n            if (!data.data.hits.length) {\n              return toast.error(\n                'There is no movies found with that search request'\n              );\n            }\n            const mappedMovies = data.data.hits.map(\n              ({ id, webformatURL, tags, largeImageURL }) => ({\n                id,\n                webformatURL,\n                tags,\n                largeImageURL,\n              })\n            );\n            setMovies(i => [...i, ...mappedMovies]);\n          });\n        } catch (error) {\n          setError(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }, 1000);\n    };\n    if (searchRequest !== '') {\n      updateMovies(searchRequest);\n    }\n  }, [searchRequest]);\n\n  const handleSearchSubmit = value => {\n    if (value !== searchRequest) {\n      setSearchRequest(value);\n      setMovies([]);\n      return;\n    }\n  };\n\n  return (\n    <>\n      <Searchbar onSearch={handleSearchSubmit} />\n      {error && toast.error(`Whoops, something went wrong: ${error.message}`)}\n      {isLoading && <Loader color={'#3f51b5'} size={32} />}\n      {movies.length > 0 && <MovieGallery movies={movies} />}\n    </>\n  );\n};\n","import axios from 'axios';\n\nexport const http = {\n  get(url) {\n    return axios.get(url);\n  },\n  post(url, body) {\n    return axios.post(url, body);\n  },\n};\n","const settings = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  API_KEY: 'c2a3e67f469a4984c82975dd15f4f53a',\n  DEFAULT_LANGUAGE: 'en-US',\n  // PER_PAGE: '&per_page=12',\n};\n\nexport default settings;\n","import { http } from './api';\nimport apiSettings from './settings';\n\nconst { BASE_URL, API_KEY } = apiSettings;\n\nexport const fetchMovies = (page = 1) => {\n  return http.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n};\n"],"names":["movies","location","useLocation","map","id","title","to","state","from","onSearch","useState","searchRequest","setSearchRequest","className","style","onSubmit","event","preventDefault","trim","toast","type","name","value","onChange","currentTarget","toLowerCase","autoComplete","autoFocus","placeholder","MoviesPage","setMovies","error","setError","isLoading","setIsLoading","useEffect","setTimeout","fetchMovies","then","data","hits","length","mappedMovies","webformatURL","tags","largeImageURL","i","updateMovies","message","Loader","color","size","MovieGallery","http","url","axios","BASE_URL","API_KEY","DEFAULT_LANGUAGE","apiSettings","page"],"sourceRoot":""}